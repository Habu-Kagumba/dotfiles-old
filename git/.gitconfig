[user]
    name = Herbert Kagumba
    email = habukagumba@gmail.com
[core]
    editor = /usr/local/bin/nvim
    excludesfile = ~/.gitignore_global
[push]
    default = current
[branch "master"]
    remote = origin
    merge  = refs/heads/master
[color]
    diff = auto
    status = auto
    branch = auto
[filter "lfs"]
    required = true
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
[difftool "sourcetree"]
    cmd = opendiff \"$LOCAL\" \"$REMOTE\"
    path = 
[mergetool "sourcetree"]
    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true
[alias]
    # Clean merged branches
    cb = "!f() { git checkout --quiet master && git branch --merged | grep --invert-match '\\*' | xargs -n 1 git branch --delete; git checkout --quiet @{-1}; }; f"

    url =! bash -c 'git config --get remote.origin.url | sed -E "s/.+:\\(.+\\)\\.git$/https:\\\\/\\\\/github\\\\.com\\\\/\\\\1/g"'
    d  = diff --find-renames --find-copies --format=fuller --color-words
    dw = diff --find-renames --find-copies --format=fuller

    # diff upstream master
    du = diff --find-renames --find-copies --format=fuller --color-words origin/master HEAD

    # diff current branch against master
    dm = diff --find-renames --find-copies --format=fuller --color-words master HEAD
    dms = diff --find-renames --find-copies --stat master HEAD

    # git show commits that are on the current branch but NOT on some other branch, eg:
    #
    #     git diffbranch master..
    #
    # Note the two dots that come AFTER the name of the master branch.
    diffbranch = log --pretty='%C(yellow)%h%d %Creset%an %Cgreen%ar:%Creset %s' --graph

    # diff current branch against the same branch at origin
    # eg just before pushing to remote to assure you are only pushing what you think you are pushing.
    # More flexible form of git diff origin/master master
    diffremote = "! branchname=$(git branch | grep ^\\* | cut -d' ' -f2); git diff origin/$branchname $branchname"

    t  = !git tag -ln1 | sort -rn
    tt = log --date-order --graph --tags --simplify-by-decoration --pretty=format:'%ai %h %d'
    ttt = log --all --date-order --graph --tags --simplify-by-decoration --pretty=format:'%ai %h %d'
    tags = tag -l -n1

    # show the most recent commit
    wut = log --pretty=oneline --abbrev-commit --graph --decorate -p -n 1

    unstage = reset
    undo = reset HEAD~1
    staged = diff --cached --find-renames --find-copies --format=fuller --color-words

    # see http://stackoverflow.com/questions/12055198/find-out-git-branch-creator
    branches = !git for-each-ref --format='%(committerdate)%09%(authorname)%09%(objectname:short)%09%(refname)' \
        | sort -k5n -k2M -k3n -k4n \
        | grep --color=never remotes \
        | perl -lwpe 's{refs/remotes/origin/}{}' \
        | awk -F '\t' '{ printf \"%-32s %-22s %-12s %s\\n\", $1, $2, $3, $4 }'

    # see http://stackoverflow.com/questions/2514172/listing-each-branch-and-its-last-revisions-date-in-git
    b = !git for-each-ref --sort='-authordate' \
        --format='%(authordate:short)%09%(objectname:short)%09%(refname)' refs/heads | \
        sed -e 's-refs/heads/--'

    log-json = log --pretty=format:'{%n  \"commit\": \"%H\",%n  \"author\": \"%an <%ae>\",%n  \"date\": \"%ad\",%n  \"message\": \"%f\"%n},'

    clean-how-i-mean = !git status -s | grep --color=never '??' | cut -c4- | xargs -I@ rm -rv @
    cleanse = !git clean-how-i-mean

    whatever = commit -a --fixup HEAD
    whatevs = !git whatever
    wat = !git whatever

    YOLO = !git whatever && git push

    sync = pull --rebase origin master

    # Update git commit author date when amending.
    #
    # cf http://stackoverflow.com/questions/9110310
    amend = !git commit --amend --date=\"$(date -R)\"

[hub]
    protocol = https
