if has('persistent_undo')
	set undofile
endif

set undodir=$HOME/.VIM_UNDO_FILES

set undolevels=5000

" Matchpairs
set matchpairs+=<:>,=:;

" Paste
nnoremap <F5> :set invpaste paste?<CR>
set pastetoggle=<F5>

" remap <ESC>
inoremap jk <Esc>

" remap completion
inoremap <leader>, <C-x><C-p>

" custom indentation for filetypes
autocmd BufNewFile,BufRead *.erb setlocal filetype=eruby
autocmd BufNewFile,BufRead *.html setlocal filetype=html
autocmd BufNewFile,BufRead *.haml setlocal filetype=haml
autocmd BufNewFile,BufRead,BufReadPost *.jade setlocal filetype=jade
autocmd BufNewFile,BufRead *.scss.erb setlocal filetype=scss
autocmd FileType sass setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType scss setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType eruby setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType html setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType haml setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType jade setlocal expandtab shiftwidth=2 tabstop=2

function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"
" this mapping Enter key to <C-y> to chose the current highlight item
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Allow JSX in normal JS files
let g:jsx_ext_required = 0

" Js linting
let g:used_javascript_libs = 'react,chai,flux,rambda,jasmine'

" Autoclose Quickfix
let g:flow#autoclose = 1

" syntastic
let g:syntastic_javascript_checkers=['eslint']
let g:javascript_plugin_flow = 1

" Example setting checker for specific project

" autocmd BufNewFile,BufReadPre *.js   let b:syntastic_checkers =
"     \ expand('<amatch>') =~# '^/path/to/project1/' ? ['eslint'] :
"     \ expand('<amatch>') =~# '^/path/to/project2/' ? ['jshint'] :
"     \     ['standard']

" OR

" autocmd BufNewFile,BufReadPre /path/to/project2/**/*.js  let b:syntastic_checkers = ['jshint']

" enable code folding for javascript
let javascript_enable_domhtmlcss = 1

" optiona YCM config
" These are the tweaks I apply to YCM's config, you don't need them but they might help.
" YCM gives you popups and splits by default that some people might not like, so these should tidy it up a bit for you.
let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]
set completeopt-=preview

" Syntastic quickfix window setting
let g:syntastic_loc_list_height=2

" add shebang info to files
augroup Shebang
  autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python\<nl># -*- coding: iso-8859-15 -*-\<nl>\"|$
  autocmd BufNewFile *.rb 0put =\"#!/usr/bin/env ruby\<nl># encoding: UTF-8\<nl>\"|$
  autocmd BufNewFile *.tex 0put =\"%&plain\<nl>\"|$
  autocmd BufNewFile *.\(cc\|hh\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
augroup END

" run ruby in terminal
function! RubyRun()
    call inputsave()
    let params = input('Run ruby file: ')
    call inputrestore()
    execute "!clear; ruby ".params
endfunction
:nnoremap <leader>ruby :call RubyRun()<cr>

" run erlang in terminal
function! ErlangRun()
    execute "!clear; erl"
endfunction
:nnoremap <leader>erl :call ErlangRun()<cr>

" run rubocop in terminal
function! RubocopRun()
    call inputsave()
    let params = input('Run rubocop file: ')
    call inputrestore()
    execute "!clear; rubocop ".params
endfunction
:nnoremap <leader>rubocop :call RubocopRun()<cr>

" Customise vim-rspec command
let g:rspec_command = "!clear; bundle exec rspec -c -f d {spec}"

" enable mouse scrolling
set mouse=a

" vim airline integration
let g:airline_powerline_fonts = 1
let g:airline#extensions#tmuxline#enabled = 0

" tree command.
function! GetTree()
    call inputsave()
    let params = input('Ignore -I, Pattern -P, Hidden -a (sep => |):')
    call inputrestore()
    execute "!clear; tree ".params
endfunction
:nnoremap <leader>tree :call GetTree()<cr>

" relativenumber
set rnu
" set number
function! NumberToggle()
  if(&relativenumber == 1)
    set nornu
    set nu
  else
    set rnu
    set nonu
  endif
endfunc

nnoremap <C-m> :call NumberToggle()<cr>

" map <F6> to generate ctags
nnoremap <F6> :!ctags -R<cr>
" Automatically generate ctags on save.
" autocmd BufWritePost * call system("ctags -R")

" transparent background
:hi Normal ctermbg=none

" markdown
let g:markdown_fenced_languages = ['html', 'vim', 'ruby', 'python', 'bash=sh']

" re-indent whole file
map <F7> mzgg=G`z`

" Insert Mode as bpry<space>
iabbr bpry require'pry';binding.pry

" Add the pry debug line with ,bp
map <Leader>bp orequire'pry';binding.pry<esc>:w<cr>
" Alias for one-handed operation:
map <Leader><Leader>p <Leader>bp

" Keep pry from annoyingly hanging around when using, e.g. pry-rescue/minitest
map <F9> :wa<cr>:call system('kill-pry-rescue')<cr>

" Nab lines from ~/.pry_history (respects "count")
nmap <Leader>ph :<c-u>let pc = (v:count1 ? v:count1 : 1)<cr>:read !tail -<c-r>=pc<cr> ~/.pry_history<cr>:.-<c-r>=pc-1<cr>:norm <c-r>=pc<cr>==<cr>
" â†‘ thanks to Houl, ZyX-i, and paradigm of #vim for all dogpiling on this one.

" Fonts customization
highlight Comment cterm=italic
highlight htmlArg cterm=italic

" Android
let g:gradle_path = '/Users/habu/.sdkman/candidates/gradle/current/bin/gradle'
let g:android_sdk_path = '/Users/habu/Library/Android/sdk'
